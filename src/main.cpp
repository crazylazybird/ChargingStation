#include "main.h"


bool stayIDLE = true;

void setup(){
    UART_Setup();
    softserial_energy_port_send_command("E");                                                           //сброс счетчика энергии
    softserial_energy_port_send_command("R OFF");                                                       //Отключаем NFC карту, ожидание оплаты    
}

/*
Принцип работы костыля:
    Есть станция для зарядки электромобилей за 1млн, есть за 2млн.
    За 2млн обладает терминалом для оплаты банковской картой, за 1млн только карточки, баланс которых нужно пополнять в офисе (обычная NFC карточка как пропуск в универ)
    Задача сделать имитацию прикладывания этой обычной карты к станции путем замыкания и размыкания одного контакта NFC считывателя, в которой мы установим свой терминал оплаты уже банковской картой 
Составляющие проекта:
    Реле для замыкания и размыкания считывателя (т.к у считывателя будет всегда установлена карта с бесконечным балансом)
    Терминал оплаты Vendotek    
    Счетчик электроэнергии для понимания сколько нужно заплатить покупателю (Сейчас ардуина, будет только ESP32)
    
Общение терминала и ESP32 осуществляется путем обменивания сообщениями в определенном формате:
    Для поддержания терминала в готовности принять оплату IDL
    Для запроса платежа VRP с суммой операции, в случае успешной оплаты терминал отсылает тот же VRP с запрашиваемой суммой 
    Для возврата средств FIN
    Для отключения терминала DIS

На сервер нужно передавать:
    Нужно дописать структуру для хранения полного цикла зарядки чтобы отправлять на сервер единым целым всю информацию (Был запрос на платеж, но он не прошел. Платеж прошел, но зарядка не началась и тд)
    либо эти все операции делать на сервере передавая всю необходимую инфу, но это плохо потому что интернет может отвалиться или что-то сломаться и история вся потеряется впринцепе, лучше вообще сохранять все логи на флешку.
    Сообщения о текущем статусе платеже и суммах в процессе
        enum PaymentStatus : uint8_t {
            WAITING_PAYMENT = 0,            // Ожидание платежа 
            PAID = 1,                       // Платеж поступил
            SPENDING = 2,                   // Зарядка идет
            REFUND = 3,                     // Произведен возврат средств поскольку прервали зарядку
            INSUFFICIENT_FUNDS = 4          // Недостаточно средств соответственно прервать зарядку
        };        
    Данные о потребляемой мощности, напряжении и токе.
*/

void loop() {
    UART_Commands_processing();                 // Обработка команд меню для тестирования терминала 
    UART_POS_received_data();                   // Прием байтов от терминала и запись в буфер для последующей обработки 
    send_IDLE();                                // Периодическая отправка сообщения терминалу чтобы он был готов принять оплату, иначе будет сообщение что оплата не принимается 
    process_received_energy_data();             // Прием данных об электроэнергии от ардуины (будет убрана в последующем и считывание будет происходить на esp32)
    processing_received_POS_message();          // Обработка буфера принятых байтов от терминала и декодирование сообщения
    charging_managment();                       // Обработка процесса зарядки в случае различных сценариев
}